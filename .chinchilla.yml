# ---
# version: 1.0
# name: 'Stress test endpoint 123'
# description: 'Stress it real good'
# tags:
#   - prod
#   - state
# platform: aws
# region: us-east-1
# steady_states:
#   - name: 'Verify healthcheck is up'
#     type: 'http'
#     endpoint: 'https://chaoscollector.ngrok.io/health'
#     status: 200
# steps:
#   - conditions:
#     - name: 'Stress the healthcheck'
#       action: 'stress_endpoint'
#       parameters:
#         endpoint: https://chaoscollector.ngrok.io/health
#         vus: 10
#         duration: 1s
    # expect:
    #   - name: "Healthcheck is still up"
    #     type: http
    #     parameters:
    #       endpoint: https://chaoscollector.ngrok.io/health
    #       debug: true
# ---
# version: 1.0
# name: 'Server failure within an ASG'
# description: 'Turn off a single server and expect a new one to spin up'
# tags:
#   - prod
#   - state
# platform: aws
# region: us-east-1
# steady_states:
#   - name: 'Verify healthcheck is up'
#     type: 'http'
#     endpoint: 'https://chaoscollector.ngrok.io/health'
#     status: 200
# steps:
#   - conditions:
#     - name: 'Stop one server'
#       action: 'stop_instances'
#       parameters:
#         instance_ids:
#           - "i-04eca74d308f10ba0"
#     expect:
#       - name: "Server comes back up"
#         type: event
#         jq: .["detail-type"] == "EC2 Instance Launch Successful" and .["detail"]["AutoScalingGroupName"] == "chinchilla-test-target-asg"
#   - conditions:
#     - name: 'Stop another server'
#       action: 'stop_instances'
#       parameters:
#         instance_ids:
#           -  "i-04eca74d308f10ba0"
#     expect:
#       - name: "Server comes back up"
#         type: event
#         jq: .["detail-type"] == "EC2 Instance Launch Successful" and .["detail"]["AutoScalingGroupName"] == "chinchilla-test-target-asg"

# ---
# version: 1.0
# name: 'Chinchilla API'
# description: 'Test the chinchilla API'
# tags:
#   - prod
#   - state
# platform: aws
# account_id: todo
# region: us-east-1

# # Experiment halts if any of these checks fail
# steady_states:
#   - name: 'Check Products API'
#     type: 'http'
#     endpoint: 'http://chinchilla-api-dev-878609447.us-east-1.elb.amazonaws.com/products'
#     status: 200

# # Different attacks to take on this service
# steps:
#   - conditions:
#       - name: 'Stop 50%'
#         action: 'stop_random_tasks'
#         parameters:
#           task_percent: 50
#           cluster: "chinchilla-api-dev"
#         delay:
#           after: 5

#     # Expected outcomes
#     expect:
#       - name: 'New ECS tasks start'
#         type: event
#         jq: .["detail-type"] == "ECS Task State Change" and ."detail"."lastStatus" == "RUNNING" and ."detail"."clusterArn" == "arn:aws:ecs:us-east-1:332697329009:cluster/chinchilla-api-dev"


#   - conditions:
#       - name: 'Stop 100%'
#         action: 'stop_random_tasks'
#         parameters:
#           task_percent: 100
#           cluster: "chinchilla-api-dev"
#         delay:
#           after: 5

#     # Expected outcomes
#     expect:
#       - name: 'New ECS tasks start'
#         type: event
#         jq: .["detail-type"] == "ECS Task State Change" and ."detail"."lastStatus" == "RUNNING" and ."detail"."clusterArn" == "arn:aws:ecs:us-east-1:332697329009:cluster/chinchilla-api-dev"
   
#     # Run at the end of the step, regardless of if it succeeds or not
#     cleanup:
#       - name: 'Stop an EC2 server'
#         action: 'stop_instances'
#         parameters:
#           instance_ids:
#             -  "i-0eb96356f41ef95c1"

---
version: 1.0
name: 'Kill EC2 instance'
description: 'Kills it and nothing happens'
tags:
  - prod
  - state
platform: aws
region: us-east-1
steps:
  - conditions:
    - name: 'Stop server'
      action: 'stop_instances'
      parameters:
        instance_ids:
          - "i-04eca74d308f10ba0"
    expect:
      - name: "Server dies"
        type: event
        jq: .["detail-type"] == "EC2 Instance State-change Notification" and .["detail"]["instance-id"] == "i-09295c00d884f924b" and .["detail"]["state"] == "stopped"

    cleanup:
      - name: 'Start the server'
        action: 'start_instnaces'
        parameters:
          instance_ids:
            -  "i-04eca74d308f10ba0"